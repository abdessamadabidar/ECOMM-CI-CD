workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - when: always

stages:
  - test
  - build
  - push
  - health_check
  - deploy

variables:
  DOCKER_DIND_IMAGE: docker:24.0.9-dind
  DOCKER_CLIENT_IMAGE: docker:24.0.9-cli
  LOCAL_SERVER_PORT: 8080
  HOST: "localhost"
  SPRING_BOOT_IMAGE: "${CI_REGISTRY_IMAGE}/spring_boot"
  SPRING_BOOT_TAR_FILE_NAME: "spring_boot_image.tar"
  ANGULAR_IMAGE: "${CI_REGISTRY_IMAGE}/angular"
  ANGULAR_TAR_FILE_NAME: "angular_image.tar"
  TAR_FILE_FOLDER: ".docker"
  BACKEND_ROOT: "."
  CLIENT_ROOT: "./client"
  DEPLOYMENT_SERVER_HOST: 13.37.106.153
  DEPLOYMENT_SERVER_ENDPOINT: ec2-13-37-106-153.eu-west-3.compute.amazonaws.com


cache:
  paths:
    - .m2/repository
    - target/

run_unit_tests:
  image: maven:3.8.3-openjdk-17
  stage: test

  variables:
    SPRING_PROFILES_ACTIVE: test

  script:
    - mvn clean test -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}
    - mvn surefire-report:report

  artifacts:
    when: always
    expire_in: 2 days
    paths:
      - target/reports/*

  except:
    changes:
      - "${BACKEND_ROOT}/${CLIENT_ROOT}/**/*"
      


build_spring_boot_image:
  stage: build
  image: $DOCKER_CLIENT_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  tags:
    - ec2
    - remote
    - shell
  before_script:
    - apk update && apk add xq
    - export POM_XML_VERSION=$(cat pom.xml | xq -x /project/version)
    - export SPRING_BOOT_IMAGE_VERSION_TAG=$POM_XML_VERSION.$CI_PIPELINE_IID
    - echo "SPRING_BOOT_VERSION_TAG=$SPRING_BOOT_IMAGE_VERSION_TAG" >> spring_boot_build.env
    - mkdir -p $TAR_FILE_FOLDER
  script:
    - docker build -t $SPRING_BOOT_IMAGE:$SPRING_BOOT_IMAGE_VERSION_TAG .
    - docker save -o "${TAR_FILE_FOLDER}/${SPRING_BOOT_TAR_FILE_NAME}" $SPRING_BOOT_IMAGE:$SPRING_BOOT_IMAGE_VERSION_TAG 
  artifacts:
    reports:
      dotenv: "${BACKEND_ROOT}/spring_boot_build.env"
    expire_in: 10 min
    paths:
      - "${BACKEND_ROOT}/$TAR_FILE_FOLDER/"
  except:
    changes:
      - "${BACKEND_ROOT}/${CLIENT_ROOT}/**/*"


spring_boot_health_check:
  stage: health_check
  needs:
    - build_spring_boot_image
  dependencies:
    - build_spring_boot_image
  image: $DOCKER_CLIENT_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  before_script:
    - docker load -q -i "${TAR_FILE_FOLDER}/${SPRING_BOOT_TAR_FILE_NAME}"
    - apk update && apk --no-cache add jq
  script:
    - >
      docker run --name=healthCheckTest -d 
      -p 8080:8080 
      -e "APP_NAME=Shopino" -e "SPRING_PROFILES_ACTIVE=test" -e "NUMBER_OF_CUSTOMERS=10" -e "NUMBER_OF_PRODUCTS=20" 
      -e "NUMBER_OF_ORDERS=5"
      --health-cmd='curl -f http://localhost:8080/actuator/health/ping || exit 1' 
      --health-interval=2s "$SPRING_BOOT_IMAGE:$SPRING_BOOT_VERSION_TAG"
    - sleep 60
    - docker logs healthCheckTest 
    - >
      if docker inspect healthCheckTest | jq '.[0].State.Status' | grep -q "running";
      then echo "Health check passed."; 
      else echo "Health check failed."; exit 1; 
      fi


build_angular_image:
  stage: build
  image: $DOCKER_CLIENT_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  before_script:
    - cd $CLIENT_ROOT
    - apk --no-cache add jq
    - export PACKAGE_JSON_VERSION=$(cat ./package.json | jq -r .version)
    - export ANGULAR_IMAGE_VERSION_TAG=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo "ANGULAR_VERSION_TAG=$ANGULAR_IMAGE_VERSION_TAG" >> angular_build.env
    - mkdir -p $TAR_FILE_FOLDER
  script:
    - docker build -t $ANGULAR_IMAGE:$ANGULAR_IMAGE_VERSION_TAG .
    - docker save -o "${TAR_FILE_FOLDER}/${ANGULAR_TAR_FILE_NAME}" $ANGULAR_IMAGE:$ANGULAR_IMAGE_VERSION_TAG 
  artifacts:
    reports:
      dotenv: "${CLIENT_ROOT}/angular_build.env"
    expire_in: 10 min
    paths:
      - "${CLIENT_ROOT}/${TAR_FILE_FOLDER}/"
  # only:
  #   changes:
  #     - "${CLIENT_ROOT}/**/*"
    
push_spring_boot_image:
  stage: push
  needs:
    - build_spring_boot_image
  dependencies:
    - build_spring_boot_image
  image: $DOCKER_CLIENT_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -q -i "${TAR_FILE_FOLDER}/${SPRING_BOOT_TAR_FILE_NAME}"
  script:
    - docker push $SPRING_BOOT_IMAGE:$SPRING_BOOT_VERSION_TAG
  after_script:
    - docker image ls
  
push_angular_image:
  stage: push
  needs:
    - build_angular_image
  dependencies:
    - build_angular_image
  image: $DOCKER_CLIENT_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -q -i "${CLIENT_ROOT}/${TAR_FILE_FOLDER}/${ANGULAR_TAR_FILE_NAME}"
  script:
    - docker push $ANGULAR_IMAGE:$ANGULAR_VERSION_TAG
  after_script:
    - docker image ls



deploy_to_dev:
  stage: deploy
  tags:
    - ec2
    - remote
    - shell
  dependencies:
    - build_spring_boot_image
    - build_angular_image

  variables:
    SPRING_APP_PORT: 8080
    ANGULAR_APP_PORT: 4200
    ENVIRONMENT: development
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$DEPLOYMENT_SERVER_HOST:/home/ubuntu
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$DEPLOYMENT_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export DC_SPRING_BOOT_IMAGE_NAME=$SPRING_BOOT_IMAGE
        export DC_SPRING_BOOT_VERSION_TAG=$SPRING_BOOT_VERSION_TAG
        export SPRING_BOOT_PORT=$SPRING_APP_PORT

        export DC_ANGULAR_IMAGE_NAME=$ANGULAR_IMAGE
        export DC_ANGULAR_VERSION_TAG=$ANGULAR_VERSION_TAG
        export ANGULAR_PORT=$ANGULAR_APP_PORT

        export $(grep -v '^#' $ENV | xargs)
        
        docker-compose -f docker-compose.yml down  && 
        docker-compose  -f docker-compose.yml -d up"
  environment:
    name: $ENVIRONMENT
    url: $DEPLOYMENT_SERVER_ENDPOINT

